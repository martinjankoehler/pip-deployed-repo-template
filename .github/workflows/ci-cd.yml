##
## --------------------------------------------------------------------------------
## SPDX-FileCopyrightText: 2025 Martin Jan K√∂hler
## Johannes Kepler University, Institute for Integrated Circuits.
##
## This file is part of openpdk-pmap 
## (see https://github.com/martinjankoehler/openpdk-pmap).
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/>.
## SPDX-License-Identifier: GPL-3.0-or-later
## --------------------------------------------------------------------------------
##

name: Python build

on:
  push:
    branches: [ "main" ]
    paths-ignore:
       - '.gitignore'
       - '**.md'
       - '*.sh'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
       - '.gitignore'
       - '**.md'
       - '*.sh'
  workflow_call:
  workflow_dispatch:
  release:
    types: [published]

concurrency:
  group: ${{ github.repository }}-${{ github.event.number || github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build_and_test:
    name: Build/Test py${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. 
      # Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        python-version: ["3.13"]
    steps:
    - uses: actions/checkout@v5

    - name: "[üêç] Setup python ${{ matrix.python-version }}"
      id: setup-python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: "[üêç] Install Poetry"
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
        installer-parallel: true

    - name: "[üêç] Check version"
      if: ${{ github.event.release }}
      run: |
        version=$(poetry version | awk '{print $2}')
        tag=$(echo "${{ github.ref }}" | awk '{split($0,p,"/"); print p[3]}')
        if [ "v$version" != $tag ]; then echo "Release tag ('$tag') and poetry version ('v$version') do not match!"; exit 1; fi;
      shell: bash
    
    - name: "[üêç] Load cached venv"
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: "[üêç] Install dependencies"
      run: poetry install --no-interaction --no-root
      shell: bash    # NOTE: required for windows poetry calls
        
    - name: "Set reusable strings"
      # Turn repeated input strings (such as the build output directory) into step outputs.
      # These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: "[üêç] Install project"
      run: poetry install --no-interaction
      shell: bash    # NOTE: required for windows poetry calls

    - name: "[üêç] Build wheel and source archives"
      run: poetry build --output dist
      shell: bash    # NOTE: required for windows poetry calls

    - name: "[üêç] Store dist artifact"
      uses: actions/upload-artifact@v4
      with:
        name: python-dist_py${{ matrix.python-version }}
        path: dist
        retention-days: 7
        if-no-files-found: error

  call-publish-pypi:
    name: "Publish distribution üì¶s to PyPI/TestPyPI"
    needs: build_and_test
    concurrency:
      group: ${{ github.repository }}-${{ github.event.number || github.head_ref || github.sha }}-${{ github.workflow }}-publish-pypi
      cancel-in-progress: true
    uses: ./.github/workflows/publish-pypi.yml

